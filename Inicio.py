import streamlit as st
import pandas as pd
import os
from langchain.agents.agent_types import AgentType
from langchain_experimental.agents.agent_toolkits import create_pandas_dataframe_agent
from langchain_openai import ChatOpenAI
import warnings
warnings.filterwarnings('ignore')

def main():
    st.set_page_config(
        page_title="An√°lisis de Datos con IA",
        page_icon="üìä",
        layout="wide"
    )
    
    st.title("üìä An√°lisis de Datos con LangChain y Pandas")
    st.markdown("**Carga tu archivo CSV/XLS y haz preguntas sobre tus datos usando IA**")
    
    # Sidebar para configuraci√≥n
    with st.sidebar:
        st.header("‚öôÔ∏è Configuraci√≥n")
        
        # Campo para API Key de OpenAI
        openai_api_key = st.text_input(
            "üîë API Key de OpenAI:",
            type="password",
            help="Ingresa tu API key de OpenAI para usar el modelo GPT"
        )
        
        # Selecci√≥n de modelo
        model_name = st.selectbox(
            "ü§ñ Modelo OpenAI:",
            ["gpt-3.5-turbo", "gpt-4", "gpt-4-turbo-preview"],
            index=0
        )
        
        # Temperatura del modelo
        temperature = st.slider(
            "üå°Ô∏è Temperatura:",
            min_value=0.0,
            max_value=1.0,
            value=0.1,
            step=0.1,
            help="Controla la creatividad de las respuestas (0 = m√°s preciso, 1 = m√°s creativo)"
        )
    
    # Verificar si se ha ingresado la API key
    if not openai_api_key:
        st.warning("‚ö†Ô∏è Por favor, ingresa tu API Key de OpenAI en la barra lateral.")
        st.info("Puedes obtener tu API key en: https://platform.openai.com/api-keys")
        return
    
    # Configurar la variable de entorno
    os.environ["OPENAI_API_KEY"] = openai_api_key
    
    # Carga de archivo
    st.header("üìÅ Carga tu archivo")
    uploaded_file = st.file_uploader(
        "Selecciona un archivo CSV o Excel:",
        type=['csv', 'xlsx', 'xls'],
        help="Formatos soportados: CSV, Excel (.xlsx, .xls)"
    )
    
    if uploaded_file is not None:
        try:
            # Leer el archivo seg√∫n su tipo
            if uploaded_file.name.endswith('.csv'):
                df = pd.read_csv(uploaded_file)
            else:
                df = pd.read_excel(uploaded_file)
            
            st.success(f"‚úÖ Archivo cargado exitosamente: {uploaded_file.name}")
            
            # Mostrar informaci√≥n b√°sica del dataset
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üìè Filas", df.shape[0])
            with col2:
                st.metric("üìä Columnas", df.shape[1])
            with col3:
                st.metric("üíæ Tama√±o", f"{df.memory_usage(deep=True).sum() / 1024:.1f} KB")
            
            # Vista previa de los datos
            st.header("üëÄ Vista previa de los datos")
            
            # Tabs para diferentes vistas
            tab1, tab2, tab3 = st.tabs(["üìã Datos", "üìà Informaci√≥n", "üîç Estad√≠sticas"])
            
            with tab1:
                st.dataframe(df.head(100), use_container_width=True)
                
            with tab2:
                st.subheader("Informaci√≥n del Dataset")
                buffer = pd.io.formats.info.get_info_summary()
                info_df = pd.DataFrame({
                    'Columna': df.columns,
                    'Tipo': df.dtypes.astype(str),
                    'No Nulos': df.count(),
                    'Nulos': df.isnull().sum()
                })
                st.dataframe(info_df, use_container_width=True)
                
            with tab3:
                st.subheader("Estad√≠sticas Descriptivas")
                numeric_df = df.select_dtypes(include=['number'])
                if not numeric_df.empty:
                    st.dataframe(numeric_df.describe(), use_container_width=True)
                else:
                    st.info("No hay columnas num√©ricas para mostrar estad√≠sticas.")
            
            # Crear el agente de pandas
            st.header("ü§ñ Agente de An√°lisis IA")
            
            try:
                # Inicializar el modelo de OpenAI
                llm = ChatOpenAI(
                    model=model_name,
                    temperature=temperature,
                    openai_api_key=openai_api_key
                )
                
                # Crear el agente de pandas
                agent = create_pandas_dataframe_agent(
                    llm,
                    df,
                    verbose=True,
                    agent_type=AgentType.OPENAI_FUNCTIONS,
                    allow_dangerous_code=True  # Necesario para ejecutar c√≥digo
                )
                
                st.success("üéØ Agente IA inicializado correctamente")
                
                # Ejemplos de preguntas
                st.subheader("üí° Ejemplos de preguntas que puedes hacer:")
                examples = [
                    "¬øCu√°ntas filas tiene el dataset?",
                    "¬øCu√°les son las columnas num√©ricas?",
                    "Muestra un resumen estad√≠stico de los datos",
                    "¬øHay valores nulos en el dataset?",
                    "¬øCu√°l es la correlaci√≥n entre las variables num√©ricas?",
                    "Crea un gr√°fico de las variables m√°s importantes",
                    "¬øCu√°les son los valores √∫nicos de [nombre_columna]?",
                    "Calcula la media, mediana y moda de [columna_numerica]"
                ]
                
                for i, example in enumerate(examples, 1):
                    st.write(f"{i}. {example}")
                
                # Interface para hacer preguntas
                st.subheader("‚ùì Haz tu pregunta sobre los datos")
                
                # Historial de conversaci√≥n
                if 'chat_history' not in st.session_state:
                    st.session_state.chat_history = []
                
                # Campo de entrada para la pregunta
                user_question = st.text_input(
                    "Escribe tu pregunta:",
                    placeholder="Ej: ¬øCu√°l es la correlaci√≥n entre las variables num√©ricas?",
                    key="user_input"
                )
                
                col1, col2 = st.columns([1, 4])
                with col1:
                    ask_button = st.button("üöÄ Preguntar", type="primary")
                with col2:
                    clear_button = st.button("üóëÔ∏è Limpiar historial")
                
                if clear_button:
                    st.session_state.chat_history = []
                    st.rerun()
                
                if ask_button and user_question:
                    with st.spinner("üîÑ El agente est√° analizando tus datos..."):
                        try:
                            # Ejecutar la pregunta con el agente
                            response = agent.invoke({"input": user_question})
                            
                            # Agregar al historial
                            st.session_state.chat_history.append({
                                "question": user_question,
                                "answer": response["output"]
                            })
                            
                            # Limpiar el campo de entrada
                            st.rerun()
                            
                        except Exception as e:
                            st.error(f"‚ùå Error al procesar la pregunta: {str(e)}")
                            st.info("üí° Intenta reformular tu pregunta o verifica que la columna mencionada existe en el dataset.")
                
                # Mostrar historial de conversaci√≥n
                if st.session_state.chat_history:
                    st.subheader("üí¨ Historial de conversaci√≥n")
                    
                    for i, chat in enumerate(reversed(st.session_state.chat_history)):
                        with st.expander(f"‚ùì {chat['question'][:60]}..." if len(chat['question']) > 60 else f"‚ùì {chat['question']}", expanded=(i==0)):
                            st.write("**Pregunta:**")
                            st.write(chat['question'])
                            st.write("**Respuesta:**")
                            st.write(chat['answer'])
                            st.divider()
                
            except Exception as e:
                st.error(f"‚ùå Error al inicializar el agente: {str(e)}")
                st.info("Verifica que tu API key de OpenAI sea v√°lida y tenga cr√©ditos disponibles.")
                
        except Exception as e:
            st.error(f"‚ùå Error al cargar el archivo: {str(e)}")
            st.info("Verifica que el archivo tenga el formato correcto (CSV o Excel).")
    
    else:
        st.info("üëÜ Carga un archivo CSV o Excel para comenzar el an√°lisis.")
        
        # Informaci√≥n adicional cuando no hay archivo cargado
        st.markdown("---")
        st.subheader("‚ÑπÔ∏è Sobre esta aplicaci√≥n")
        st.markdown("""
        Esta aplicaci√≥n utiliza:
        - **Streamlit** para la interfaz web
        - **LangChain** para la gesti√≥n de agentes IA
        - **OpenAI GPT** para el procesamiento de lenguaje natural
        - **Pandas** para el an√°lisis de datos
        
        **Funcionalidades:**
        - Carga archivos CSV y Excel
        - An√°lisis autom√°tico de datos con IA
        - Respuestas en lenguaje natural
        - Generaci√≥n de estad√≠sticas y visualizaciones
        - Historial de conversaci√≥n
        """)

if __name__ == "__main__":
    main()
